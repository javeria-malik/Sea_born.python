# -*- coding: utf-8 -*-
"""sea born

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t50kO5Drhewg0BmArUFR-GlE5H_kB9sK
"""

import pandas as pd

import numpy as np

import seaborn as sns

data=sns.load_dataset("tips")

data

data.head()

data.tail()

sns.relplot(x="total_bill",y="tip",hue="sex",data=data)

sns.relplot(x="total_bill",y="tip",hue="sex",style="smoker",data=data)

sns.catplot(x="day",y="tip",kind="strip",data=data)

#jitter
#actually work to determine the desnsity etc
sns.catplot(x="day",y="tip",jitter=2,kind="strip",data=data)

data.head(2)

"""BOX PLOT:
usually use with numerical data but can also be used with categorial data
"""

# it also used to find the comparison between two data
#univariance
sns.boxplot(data["tip"],orient="v")

sns.boxplot(data["tip"],orient="h")

# in above dots are comsider as outliers

sns.catplot(x="day",y="total_bill",kind="box",data=data)

# in above every box is build for different data

sns.catplot(x="day",y="total_bill",kind="box",hue="sex",data=data)

sns.catplot(x="day",y="total_bill",kind="box",hue="smoker",data=data)

#violine plot
"""usually use for the comaprison of distribution of different variables accross some categories"""

sns.violinplot(data["total_bill"])
# here the white dotvrepresnt median

# while the black box at avove graph show qudraterial range

# other method for two plot lets write
sns.catplot(x="day",y="total_bill",kind="violin",data=data)

# other method for two plot lets write
sns.catplot(x="day",y="total_bill",hue="sex",kind="violin",data=data)

sns.catplot(x="day",y="total_bill",hue="sex",kind="violin",split="True",data=data)

# bu using split we can analyze more effeciently

# bar plot

sns.catplot(x="smoker",y="total_bill",kind="bar",data=data)

#in above graph we can see that the smoker paid more bill then average ......... then the black line avove each part show the mean and called arrplot

sns.catplot(x="smoker",y="total_bill",hue="sex",kind="bar",data=data)

# in above code behinde actually estimator is the function ehich calculate the mean and by seeing the cic in description we can determine
# the rate of confidence

#lets find mean instead of median for this
sns.catplot(x="smoker",y="total_bill",kind="bar",hue="sex",estimator=np.median,data=data)

sns.catplot(x="smoker",y="total_bill",kind="bar",hue="sex",estimator=np.sum,data=data)

# we can chane the function name in estimator as per the requirement

sns.catplot(x="sex",kind="count",data=data)

sns.catplot(x="sex",kind="count",hue="smoker",data=data)

#heatmaps

# a heatmap is graphical represntation while individual value is contained in matrix is represnted as colors

data1=sns.load_dataset("flights")

data1

data1.head()

data1.tail()

# plot x to month y to year and passengers where counted in particular year in particular place

x=data1.pivot_table(index="year",columns="month",values="passengers",aggfunc="sum")

x

#through pivot table we can make the table to analyze

sns.heatmap(x)

sns.heatmap(x,cbar=False)

# to get the gap between two adjacent cells we can use the linehwidths parameter

sns.heatmap(x,linewidths=0.5)

# we can also get the exact numbers by using annot=True and fmt="d"

sns.heatmap(x,linewidths=0.5,annot=True,fmt="d")

#there is also different color tones
sns.heatmap(x,linewidths=0.5,annot=True,fmt="d",cmap="summer")

sns.heatmap(x,linewidths=0.5,annot=True,fmt="d",cmap="viridis")

# cluster map
# similar columns and rows are come together

sns.clustermap(x)

# clustering happen due to background paarmeter matrix
sns.clustermap(x,metric="correlation")

sns.clustermap(x,z_score=0,annot=True,metric="correlation")

# if we want clustering throgh columns not with rows then
sns.clustermap(x,z_score=0,annot=True,row_cluster=False,metric="correlation")

sns.jointplot(x="total_bill",y="tip",data=data)

sns.jointplot(x="total_bill",y="tip",kind="hex",data=data)

# darkest shade has largest value and vice versa

sns.jointplot(x="total_bill",y="tip",kind="kde",data=data)

# lets have regplot

sns.jointplot(x="total_bill",y="tip",kind="reg",data=data)

data2=sns.load_dataset("iris")

data2

data2.head()

data.tail()

sns.pairplot(data2)

sns.pairplot(data2,hue="species")

# displot combine 3 things in one graph
#histogram
#kernal density estimator
#rugplot

data3=sns.load_dataset("titanic")

data3

data3.head()

data3.tail()

# lets have a column of age ..... here in age there us some missing values

data3["age"].fillna(data3["age"].mean(),inplace=True)

sns.distplot(data3["age"])

sns.displot(data3["age"])

sns.histplot(data3["age"])

# we can also get istogram by
sns.distplot(data3["age"],kde=False)

# to increase the size of bars use beans

# we can also get istogram by
sns.distplot(data3["age"],bins=50,kde=False)

# to get kde

# we can also get istogram by
sns.distplot(data3["age"],hist=False)

# to get rug plot
# we can also get istogram by
sns.distplot(data3["age"],kde=False,hist=False,rug=True)

# we can also get istogram by
sns.distplot(data3[data3["survived"]==1]["age"])

